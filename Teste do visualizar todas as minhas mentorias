import requests
import json

# --- Configurações da API (Substitua pelos valores reais da sua plataforma) ---
BASE_URL = "https://api.sua-plataforma-mentorias.com/v1" # Exemplo de URL base
API_TOKEN = "SEU_TOKEN_DE_MENTORIAS_AQUI" # !! Use um método seguro para gerenciar tokens!

# --- Cabeçalhos Comuns (GET não costuma precisar de Content-Type) ---
headers = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Accept": "application/json", # Indicamos que aceitamos resposta JSON
    "User-Agent": "GestorMentorshipClient/1.0"
}

def listar_minhas_mentorias(status_filtro=None):
    """
    Busca e retorna a lista de mentorias associadas ao usuário autenticado.
    Opcionalmente, pode filtrar por status (ex: 'ativas', 'concluidas').
    """
    # Endpoint hipotético para buscar as *suas* mentorias
    endpoint = f"{BASE_URL}/mentorships/my"

    params = {}
    if status_filtro:
        params['status'] = status_filtro # Adiciona parâmetro de query se um filtro for passado

    print(f"Buscando suas mentorias (Filtro de status: {status_filtro or 'Nenhum'})...")
    try:
        response = requests.get(endpoint, headers=headers, params=params, timeout=10)
        response.raise_for_status() # Verifica se houve erro HTTP (4xx ou 5xx)

        mentorias = response.json()
        print(f"Sucesso! Encontradas {len(mentorias)} mentorias.")
        return mentorias

    except requests.exceptions.Timeout:
        print("Erro: Tempo limite da requisição excedido.")
        return None
    except requests.exceptions.HTTPError as http_err:
        print(f"Erro HTTP: {http_err}")
        try:
            # Tenta mostrar detalhes do erro da API, se for JSON
            print("Detalhes da API:", response.json())
        except json.JSONDecodeError:
            print("Resposta da API (não JSON):", response.text)
        return None
    except requests.exceptions.RequestException as req_err:
        print(f"Erro na requisição: {req_err}")
        return None
    except Exception as e:
        print(f"Ocorreu um erro inesperado ao buscar mentorias: {e}")
        return None

# --- Exemplo de Uso ---
if __name__ == "__main__":
    print("--- Visualizador de Mentorias (Exemplo API REST) ---")

    # Busca todas as mentorias (sem filtro)
    lista_de_mentorias = listar_minhas_mentorias()

    # Exemplo de como buscar apenas mentorias 'ativas' (descomente para testar)
    # lista_de_mentorias = listar_minhas_mentorias(status_filtro='ativas')

    if lista_de_mentorias is not None:
        if not lista_de_mentorias:
            print("\nNenhuma mentoria encontrada com os critérios fornecidos.")
        else:
            print("\nSuas Mentorias:")
            # Assumindo que cada 'mentoria' na lista é um dicionário
            # com chaves como 'id', 'topico', 'participante' e 'status'
            # (Adapte essas chaves à estrutura real da sua API)
            for i, mentoria in enumerate(lista_de_mentorias):
                mentoria_id = mentoria.get('id', 'N/A')
                topico = mentoria.get('topic', 'Tópico não informado')
                participante = mentoria.get('participant_name', 'Participante não informado') # Nome do mentor ou mentorado
                status = mentoria.get('status', 'Status não informado')
                print(f"  {i+1}. ID: {mentoria_id} | Tópico: {topico} | Com: {participante} | Status: {status}")
    else:
        print("\nNão foi possível obter a lista de mentorias.")
