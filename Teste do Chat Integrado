import requests
import json

# --- Configurações da API (Substitua pelos valores reais) ---
BASE_URL = "https://api.seu-chat-integrado.com/v1" # Exemplo de URL base da API
API_TOKEN = "SEU_TOKEN_DE_API_AQUI" # !! NUNCA coloque tokens reais direto no código em produção !!

# --- Cabeçalhos Comuns ---
headers = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Content-Type": "application/json",
    "User-Agent": "GestorApiClient/1.0" # Opcional: Identifica seu client
}

def enviar_mensagem(destinatario_id, texto_mensagem):
    """
    Envia uma mensagem para um destinatário específico na plataforma de chat.
    """
    endpoint = f"{BASE_URL}/messages" # Exemplo: endpoint para enviar mensagens
    payload = {
        "recipientId": destinatario_id,
        "text": texto_mensagem
    }

    print(f"Enviando mensagem para {destinatario_id}...")
    try:
        response = requests.post(endpoint, headers=headers, json=payload, timeout=10)
        response.raise_for_status() # Levanta um erro para respostas HTTP 4xx/5xx

        print("Mensagem enviada com sucesso!")
        # print("Resposta da API:", response.json()) # Descomente para ver a resposta completa
        return response.json()

    except requests.exceptions.RequestException as e:
        print(f"Erro ao enviar mensagem: {e}")
        if hasattr(e, 'response') and e.response is not None:
            try:
                print("Detalhes do erro da API:", e.response.json())
            except json.JSONDecodeError:
                print("Detalhes do erro da API (não JSON):", e.response.text)
        return None
    except Exception as e:
        print(f"Ocorreu um erro inesperado: {e}")
        return None


def listar_mensagens_recentes(chat_id, limite=10):
    """
    Lista as mensagens mais recentes de um chat específico.
    """
    # Ajusta os headers para GET (Content-Type não costuma ser necessário)
    get_headers = headers.copy()
    get_headers.pop("Content-Type", None) # Remove Content-Type se existir

    endpoint = f"{BASE_URL}/chats/{chat_id}/messages" # Exemplo: endpoint para buscar mensagens
    params = {
        "limit": limite
    }

    print(f"Buscando últimas {limite} mensagens do chat {chat_id}...")
    try:
        response = requests.get(endpoint, headers=get_headers, params=params, timeout=10)
        response.raise_for_status()

        mensagens = response.json()
        print(f"Encontradas {len(mensagens)} mensagens.")
        # for msg in mensagens: # Descomente para imprimir detalhes de cada mensagem
        #     print(f"- {msg.get('senderId', 'Desconhecido')}: {msg.get('text', '')}")
        return mensagens

    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar mensagens: {e}")
        if hasattr(e, 'response') and e.response is not None:
            try:
                print("Detalhes do erro da API:", e.response.json())
            except json.JSONDecodeError:
                print("Detalhes do erro da API (não JSON):", e.response.text)
        return None
    except Exception as e:
        print(f"Ocorreu um erro inesperado: {e}")
        return None

# --- Exemplo de Uso ---
if __name__ == "__main__":
    print("--- Teste Cliente API Chat ---")

    # !! ATENÇÃO: Substitua por IDs e tokens válidos para teste se tiver !!
    # !! Mantenha placeholders se for apenas para o commit inicial !!
    id_canal_geral = "canal_equipe_xyz"
    id_usuario_teste = "usuario_abc"
    mensagem_teste = "Olá equipe, este é um teste de integração via API. [Gestor]"

    # 1. Teste de envio de mensagem
    # resposta_envio = enviar_mensagem(id_canal_geral, mensagem_teste)
    # if resposta_envio:
    #     print("Detalhe da resposta do envio:", resposta_envio)

    # 2. Teste de listagem de mensagens
    # mensagens_recentes = listar_mensagens_recentes(id_canal_geral, limite=5)
    # if mensagens_recentes:
    #     print("\nMensagens recentes obtidas:")
    #     for i, msg in enumerate(mensagens_recentes):
    #         print(f"{i+1}. De: {msg.get('senderId', 'N/A')} | Texto: {msg.get('text', 'N/A')}")

    print("\n--- Fim do Teste ---")
    print("Lembre-se de substituir os placeholders e configurar a autenticação corretamente.")
    print("AVISO IMPORTANTE: Nunca suba tokens ou senhas diretamente para o repositório Git!")
  
