import requests
import json

# --- Configurações da API (Substitua pelos valores reais da sua plataforma) ---
BASE_URL = "https://api.sua-plataforma.com/v1" # Exemplo de URL base
# API_KEY = "CHAVE_PUBLICA_DA_API_SE_NECESSARIO" # Algumas APIs podem exigir uma chave genérica mesmo para registro

# --- Cabeçalhos (POST precisa indicar o tipo de conteúdo JSON) ---
headers = {
    # 'X-Api-Key': API_KEY, # Descomente se a API exigir uma chave genérica no header
    "Content-Type": "application/json",
    "Accept": "application/json",
    "User-Agent": "GestorRegistrationClient/1.0"
}

def registrar_novo_usuario(nome, email, senha, cargo=None):
    """
    Tenta registrar um novo usuário na plataforma via API REST.
    """
    endpoint = f"{BASE_URL}/users" # Endpoint hipotético para criação de usuários

    # Dados a serem enviados no corpo da requisição (payload)
    # Adapte os nomes das chaves ('name', 'email', etc.) conforme a API real
    user_data = {
        "name": nome,
        "email": email,
        "password": senha, # ATENÇÃO: A API deve lidar com hashing seguro da senha!
    }
    if cargo:
        user_data['role'] = cargo # Adiciona cargo se fornecido

    print(f"Tentando registrar usuário: {email}...")
    try:
        response = requests.post(endpoint, headers=headers, json=user_data, timeout=15)

        # Verifica se a resposta foi um erro HTTP (4xx, 5xx)
        response.raise_for_status()

        # Verifica se o status code é 201 Created (ideal para criação) ou 200 OK
        if response.status_code in [200, 201]:
            print("Usuário registrado com sucesso!")
            try:
                # Tenta retornar os dados do usuário criado (pode incluir ID, etc.)
                return response.json()
            except json.JSONDecodeError:
                print("Registro bem-sucedido, mas a resposta da API não foi JSON.")
                return {"status": "success", "message": "Created"}
        else:
            # Caso inesperado, mas sem erro HTTP
            print(f"Registro pode não ter sido concluído. Status: {response.status_code}")
            print("Resposta:", response.text)
            return None

    except requests.exceptions.Timeout:
        print("Erro: Tempo limite da requisição excedido.")
        return None
    except requests.exceptions.HTTPError as http_err:
        print(f"Erro HTTP ao registrar: {http_err}")
        try:
            # Tenta mostrar detalhes do erro da API (ex: 'email já existe')
            error_details = response.json()
            print("Detalhes do erro da API:", error_details)
        except json.JSONDecodeError:
            print("Resposta de erro da API (não JSON):", response.text)
        return None
    except requests.exceptions.RequestException as req_err:
        print(f"Erro na requisição: {req_err}")
        return None
    except Exception as e:
        print(f"Ocorreu um erro inesperado durante o registro: {e}")
        return None

# --- Exemplo de Uso ---
if __name__ == "__main__":
    print("--- Sistema de Cadastro de Usuário (Exemplo API REST) ---")

    # Dados de exemplo para um novo usuário
    # !! NUNCA coloque senhas reais diretamente no código em produção !!
    novo_nome = "Nome do Novo Colaborador"
    novo_email = "novo.colaborador@suaempresa.com"
    nova_senha_insegura = "SenhaTemporaria123" # Use senhas fortes e métodos seguros!
    novo_cargo = "Analista Jr"

    # Chama a função de registro
    resultado_registro = registrar_novo_usuario(
        nome=novo_nome,
        email=novo_email,
        senha=nova_senha_insegura,
        cargo=novo_cargo
    )

    if resultado_registro:
        print("\nDetalhes do resultado do registro:")
        print(json.dumps(resultado_registro, indent=2)) # Imprime a resposta formatada
        # Exemplo: poderia extrair o ID do usuário se a API o retornar
        # novo_user_id = resultado_registro.get('id')
        # if novo_user_id:
        #     print(f"\nID do novo usuário: {novo_user_id}")
    else:
        print("\nFalha no processo de registro.")
